{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ben\\\\Documents\\\\GitHub\\\\Bartender\\\\react-app\\\\src\\\\ConfigureScreen.js\";\nimport React, { useState } from 'react';\nimport { Slider, Grid, Select, InputLabel, Typography, FormControl, MenuItem, Button, Paper, TextField } from '@material-ui/core';\nimport ingredients from './ingredients.json';\ningredients.unshift('None');\n\nfunction capitalize(text) {\n  return text.toLowerCase().split(' ').map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');\n}\n\nclass ConfigureScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'ingredient0': 'None',\n      'ingredient1': 'None',\n      'ingredient2': 'None',\n      'ingredient3': 'None',\n      'ingredient4': 'None',\n      'ingredient5': 'None'\n    };\n    this.ingredients = ingredients.sort();\n  }\n\n  handleChange(key, val) {\n    this.setState({\n      [key]: val\n    });\n  }\n\n  render() {\n    var QRCode = require('qrcode.react');\n\n    const handleChange = this.handleChange.bind(this);\n    var qr = this.state.name;\n\n    for (var i = 0; i < this.state.ingredients; i++) {\n      qr += '|' + this.state['ingredient' + i] + ':' + this.state['quantity' + i];\n    }\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      children: [...Array(7).keys()].map(index => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          style: {\n            minWidth: '10%'\n          },\n          name: `ingredient${index}`,\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          value: this.state[`ingredient${index}`],\n          onChange: event => handleChange(event.target.name, event.target.value),\n          autoWidth: true,\n          min: true,\n          children: this.ingredients.map(ingredient => {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: ingredient,\n              children: capitalize(ingredient)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default ConfigureScreen;","map":{"version":3,"sources":["C:/Users/ben/Documents/GitHub/Bartender/react-app/src/ConfigureScreen.js"],"names":["React","useState","Slider","Grid","Select","InputLabel","Typography","FormControl","MenuItem","Button","Paper","TextField","ingredients","unshift","capitalize","text","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","ConfigureScreen","Component","constructor","props","state","sort","handleChange","key","val","setState","render","QRCode","require","bind","qr","name","i","Array","keys","index","padding","minWidth","event","target","value","ingredient"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Slider, Grid, Select, InputLabel, Typography, FormControl, MenuItem, Button, Paper, TextField } from '@material-ui/core';\r\nimport ingredients from './ingredients.json'\r\n\r\ningredients.unshift('None')\r\n\r\nfunction capitalize(text) {\r\n    return text.toLowerCase()\r\n        .split(' ')\r\n        .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n        .join(' ');\r\n}\r\n\r\nclass ConfigureScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            'ingredient0': 'None',\r\n            'ingredient1': 'None',\r\n            'ingredient2': 'None',\r\n            'ingredient3': 'None',\r\n            'ingredient4': 'None',\r\n            'ingredient5': 'None',\r\n        }\r\n\r\n        this.ingredients = ingredients.sort()\r\n    }\r\n\r\n    handleChange(key, val) {\r\n        this.setState({\r\n            [key]: val\r\n        })\r\n    }\r\n\r\n    render() {\r\n        var QRCode = require('qrcode.react')\r\n        const handleChange = this.handleChange.bind(this);\r\n\r\n        var qr = this.state.name\r\n        for (var i = 0; i < this.state.ingredients; i++) {\r\n            qr += '|' + this.state['ingredient' + i] + ':' + this.state['quantity' + i]\r\n        }\r\n\r\n        return <Grid container justify=\"center\">\r\n            {\r\n                [...Array(7).keys()].map(index =>\r\n                    <Grid item xs={12} style={{ padding: '10px' }}>\r\n                        <Select\r\n                            style={{ minWidth: '10%' }}\r\n                            name={`ingredient${index}`}\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={this.state[`ingredient${index}`]}\r\n                            onChange={(event) => handleChange(event.target.name, event.target.value)}\r\n                            autoWidth\r\n                            min\r\n                        >\r\n                            {this.ingredients.map((ingredient) => {\r\n                                return <MenuItem value={ingredient}>{capitalize(ingredient)}</MenuItem>\r\n                            })}\r\n                        </ Select>\r\n                    </Grid>)\r\n            }\r\n        </Grid>\r\n    }\r\n}\r\n\r\nexport default ConfigureScreen"]},"metadata":{},"sourceType":"module"}