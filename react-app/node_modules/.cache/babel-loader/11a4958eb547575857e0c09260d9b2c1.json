{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ben\\\\Documents\\\\GitHub\\\\Bartender\\\\react-app\\\\src\\\\ChooseDrinkScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TextField, Grid, Typography, Button, Box, FormControl, FormLabel, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport drinksDict from './drinks.json';\nimport ingredients from './ingredients.json';\nimport GetDrinkScreen, { GetCustomDrinkScreen } from './GetDrinkScreen';\nexport default function ChooseDrinkScreen() {\n  _s();\n\n  const [drink, setDrink] = useState(null);\n  const [search, setSearch] = useState('');\n\n  const handleSearchChange = e => {\n    setSearch(e.target.value);\n  };\n\n  const [filterIngredients, setFilterIngredients] = useState('');\n\n  const handleIngredientChange = (e, value) => {\n    setFilterIngredients(value);\n  };\n\n  const [option, setOption] = useState('only');\n\n  const handleOptionChange = (e, value) => {\n    setOption(value);\n  };\n\n  if (drink === 'Custom') {\n    return /*#__PURE__*/_jsxDEV(GetCustomDrinkScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  } else if (drink != null) {\n    return /*#__PURE__*/_jsxDEV(GetDrinkScreen, {\n      drink: capitalize(drink),\n      qr: `g${drink}`,\n      allowFavorite: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100vw'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-basic\",\n        label: \"Search\",\n        onChange: handleSearchChange,\n        style: {\n          width: '50%',\n          margin: '10px',\n          marginRight: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        id: \"tags-standard\",\n        options: ingredients.slice(1),\n        getOptionLabel: option => capitalize(option),\n        defaultValue: [],\n        onChange: handleIngredientChange,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"standard\",\n          label: \"Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          row: true,\n          \"aria-label\": \"position\",\n          name: \"position\",\n          defaultValue: \"only\",\n          style: {\n            display: 'flex'\n          },\n          onChange: handleOptionChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"only\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 34\n            }, this),\n            label: \"Only\",\n            labelPlacement: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"contains\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 34\n            }, this),\n            label: \"Contains\",\n            labelPlacement: \"start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: search == '' && filterIngredients.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            style: {\n              padding: '10px',\n              height: '25vh'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => setDrink('Custom'),\n              style: {\n                width: '100%',\n                height: '100%'\n              },\n              children: \"Custom Drink\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), Object.keys(drinksDict).sort().map(drink => /*#__PURE__*/_jsxDEV(DrinkButton, {\n            drinkName: drink,\n            setDrink: setDrink\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 74\n          }, this))]\n        }, void 0, true) : Object.keys(drinksDict).sort().filter(drink => filterDrink(drink, search, filterIngredients, option)).map(drink => /*#__PURE__*/_jsxDEV(DrinkButton, {\n          drinkName: drink,\n          setDrink: setDrink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 140\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(ChooseDrinkScreen, \"724Jfl9ZEJE+R/q1B7Ou6F68448=\");\n\n_c = ChooseDrinkScreen;\n\nfunction filterDrink(drink, search, ingredients, option) {\n  var hasSearch = drink.includes(search.toLowerCase());\n  var hasIngredient = null;\n\n  if (option == 'only') {\n    hasIngredient = ingredients.every(ingredient => Object.keys(drinksDict[drink]).includes(ingredient));\n  } else {\n    hasIngredient = ingredients.some(ingredient => Object.keys(drinksDict[drink]).includes(ingredient));\n  }\n\n  return hasSearch && hasIngredient;\n}\n\nfunction capitalize(text) {\n  return text.toLowerCase().split(' ').map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');\n}\n\nfunction DrinkButton({\n  drinkName,\n  setDrink\n}) {\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      padding: '10px',\n      height: '25vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => setDrink(drinkName),\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: drinkName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          fontStyle: \"italic\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            },\n            children: Object.keys(drinksDict[drinkName]).map(drink => capitalize(drink)).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 12\n  }, this);\n}\n\n_c2 = DrinkButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChooseDrinkScreen\");\n$RefreshReg$(_c2, \"DrinkButton\");","map":{"version":3,"sources":["C:/Users/ben/Documents/GitHub/Bartender/react-app/src/ChooseDrinkScreen.js"],"names":["React","useState","TextField","Grid","Typography","Button","Box","FormControl","FormLabel","RadioGroup","Radio","FormControlLabel","Autocomplete","drinksDict","ingredients","GetDrinkScreen","GetCustomDrinkScreen","ChooseDrinkScreen","drink","setDrink","search","setSearch","handleSearchChange","e","target","value","filterIngredients","setFilterIngredients","handleIngredientChange","option","setOption","handleOptionChange","capitalize","width","margin","marginRight","slice","params","display","justifyContent","length","padding","height","Object","keys","sort","map","filter","filterDrink","hasSearch","includes","toLowerCase","hasIngredient","every","ingredient","some","text","split","s","charAt","toUpperCase","substring","join","DrinkButton","drinkName","alignItems"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Grid, Typography, Button, Box, FormControl, FormLabel, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport drinksDict from './drinks.json'\r\nimport ingredients from './ingredients.json'\r\nimport GetDrinkScreen, { GetCustomDrinkScreen } from './GetDrinkScreen'\r\n\r\nexport default function ChooseDrinkScreen() {\r\n    const [drink, setDrink] = useState(null);\r\n\r\n    const [search, setSearch] = useState('')\r\n    const handleSearchChange = (e) => {\r\n        setSearch(e.target.value)\r\n    }\r\n\r\n    const [filterIngredients, setFilterIngredients] = useState('')\r\n    const handleIngredientChange = (e, value) => {\r\n        setFilterIngredients(value)\r\n    }\r\n\r\n    const [option, setOption] = useState('only')\r\n    const handleOptionChange = (e, value) => {\r\n        setOption(value)\r\n    }\r\n\r\n    if (drink === 'Custom') {\r\n        return <GetCustomDrinkScreen />\r\n    } else if (drink != null) {\r\n        return <GetDrinkScreen drink={capitalize(drink)} qr={`g${drink}`} allowFavorite={true} />\r\n    }\r\n    else {\r\n        return <div style={{ width: '100vw' }}>\r\n            <TextField id=\"standard-basic\" label=\"Search\" onChange={handleSearchChange}\r\n                style={{ width: '50%', margin:'10px', marginRight:'50px' }} />\r\n\r\n            <Autocomplete\r\n                multiple\r\n                id=\"tags-standard\"\r\n                options={ingredients.slice(1)}\r\n                getOptionLabel={(option) => capitalize(option)}\r\n                defaultValue={[]}\r\n                onChange={handleIngredientChange}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"Ingredients\"\r\n                    />\r\n                )}\r\n            />\r\n            <FormControl component=\"fieldset\" style={{display:'flex', justifyContent:'center'}}>\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"only\" style={{ display: 'flex' }} onChange={handleOptionChange}>\r\n                    <FormControlLabel\r\n                        value=\"only\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Only\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                    <FormControlLabel\r\n                        value=\"contains\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Contains\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                </RadioGroup>\r\n            </FormControl>\r\n            <Grid container>\r\n                {\r\n                    search == '' && filterIngredients.length == 0 ?\r\n                        <>\r\n                            <Grid item xs={6} style={{ padding: '10px', height: '25vh' }}>\r\n                                <Button variant=\"contained\" color=\"primary\"\r\n                                    onClick={() => setDrink('Custom')}\r\n                                    style={{ width: '100%', height: '100%' }}>\r\n                                    Custom Drink\r\n                            </Button>\r\n                            </Grid>\r\n                            {Object.keys(drinksDict).sort().map(drink => <DrinkButton drinkName={drink} setDrink={setDrink} />)}\r\n                        </>\r\n                        :\r\n                        Object.keys(drinksDict).sort().filter(drink => filterDrink(drink, search, filterIngredients, option)).map(drink => <DrinkButton drinkName={drink} setDrink={setDrink} />)\r\n                }\r\n            </Grid>\r\n        </div >\r\n    }\r\n}\r\n\r\nfunction filterDrink(drink, search, ingredients, option) {\r\n    var hasSearch = drink.includes(search.toLowerCase())\r\n    var hasIngredient = null\r\n    if (option == 'only') {\r\n        hasIngredient = ingredients.every(ingredient => Object.keys(drinksDict[drink]).includes(ingredient))\r\n    } else {\r\n        hasIngredient = ingredients.some(ingredient => Object.keys(drinksDict[drink]).includes(ingredient))\r\n    }\r\n    return hasSearch && hasIngredient\r\n}\r\n\r\nfunction capitalize(text) {\r\n    return text.toLowerCase()\r\n        .split(' ')\r\n        .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n        .join(' ');\r\n}\r\n\r\nfunction DrinkButton({ drinkName, setDrink }) {\r\n    return <Grid item xs={6} style={{ padding: '10px', height: '25vh' }}>\r\n        <Button variant=\"contained\" color=\"primary\"\r\n            onClick={() => setDrink(drinkName)}\r\n            style={{ width: '100%', height: '100%' }}>\r\n            <div>\r\n                <div>\r\n                    {drinkName}\r\n                </div>\r\n                <br />\r\n                <Box fontStyle='italic'>\r\n                    <Typography variant=\"caption\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                        {\r\n                            Object.keys(drinksDict[drinkName]).map(drink => capitalize(drink)).join(', ')\r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n            </div>\r\n        </Button>\r\n    </Grid>\r\n}"]},"metadata":{},"sourceType":"module"}